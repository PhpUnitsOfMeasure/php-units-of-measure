<?php
namespace PhpUnitsOfMeasure;

/**
 * Physical quantities with this trait
 * have units which are metric and therefore have
 * a standard set of prefixes.
 */
trait HasIECUnitsTrait
{
    /**
     * Given the patterns for generating the names and aliases,
     * generate the various metric units of measure and add
     * them to this physical quantity.
     *
     * Names and Aliases are created by replacing identifiers in the respective
     * patterns.  The current allowed replacement identifiers are:
     *   %p = the abbreviated IEC prefix, like 'M' for 'megameter' or 'k' for 'kilogram'
     *   %P = the full IEC prefix, like 'mega' for 'megameter' or 'kilo' for 'kilogram'
     *   %U = uppercase version of %P
     *
     * So for instance, in order to generate 'kg', 'mg', and 'g' names for IEC units, the
     * appropriate pattern would be '%pg'.  Similarly, to generate 'kilogram', 'milligram',
     * and 'gram' aliases, the pattern would be '%Pgram'.
     *
     * The $siUnit given in the 1st parameter must be some IEC unit in the series of units
     * to be generated by this method.  This value is necessary to establish a conversion
     * factor between this continuum of IEC units and the Physical Quantity's native unit.
     *
     * The second parameter provides a scaling factor between the given IEC unit in the first parameter
     * and the base unit of the IEC continuum (ie, 'grams', 'meters', 'seconds', etc).  For instance,
     * if a Kilogram unit of measure was passed for the 1st parameter, it would be necessary to
     * then pass 1e-3 in the 2nd parameter to indicate that a gram is 1/1000 of the given unit.
     *
     * @param  UnitOfMeasure $siUnit             A unit in this physical quantity that is an IEC unit of measure
     * @param  integer       $toBaseIecUnitFactor The power-of-ten factor that converts the given IEC unit into the not-prefixed IEC base unit (ie 1e-3 for kilograms)
     * @param  string        $namePattern        The pattern to apply to the base unit's name to generate a new IEC unit name
     * @param  array         $aliasPatterns      The collection of alias patterns to use in generating a new IEC unit's aliases
     * @param  integer       $powerFactor        Use power factor for squares, qubic and other multiplication of IEC factor (ie. square is 2, qubic is 3)
     */
    protected static function addMissingIECPrefixedUnits(
        UnitOfMeasure $siUnit,
        $toBaseIecUnitFactor,
        $namePattern,
        array $aliasPatterns = []
    ) {
        /**
         * The standard set of SI prefixes
         */
        $siPrefixes = [
            [
                'abbr_prefix' => 'Y',
                'long_prefix' => 'yotta',
                'factor'      => 1e24
            ],
            [
                'abbr_prefix' => 'Z',
                'long_prefix' => 'zetta',
                'factor'      => 1e21
            ],
            [
                'abbr_prefix' => 'E',
                'long_prefix' => 'exa',
                'factor'      => 1e18
            ],
            [
                'abbr_prefix' => 'P',
                'long_prefix' => 'peta',
                'factor'      => 1e15
            ],
            [
                'abbr_prefix' => 'T',
                'long_prefix' => 'tera',
                'factor'      => 1e12
            ],
            [
                'abbr_prefix' => 'G',
                'long_prefix' => 'giga',
                'factor'      => 1e9
            ],
            [
                'abbr_prefix' => 'M',
                'long_prefix' => 'mega',
                'factor'      => 1e6
            ],
            [
                'abbr_prefix' => 'k',
                'long_prefix' => 'kilo',
                'factor'      => 1e3
            ],
            [
                'abbr_prefix' => '',
                'long_prefix' => '',
                'factor'      => 1
            ],
        ];

        /**
         * The standard set of IEC prefixes
         * http://members.optus.net/alexey/prefBin.xhtml
         */
        $iecPrefixes = [
            [
                'abbr_prefix' => 'Yi',
                'long_prefix' => 'yobi',
                'factor'      => 1208925819614629174706176
            ],
            [
                'abbr_prefix' => 'Zi',
                'long_prefix' => 'zebi',
                'factor'      => 1180591620717411303424
            ],
            [
                'abbr_prefix' => 'Ei',
                'long_prefix' => 'exbi',
                'factor'      => 1152921504606846976
            ],
            [
                'abbr_prefix' => 'Pi',
                'long_prefix' => 'pebi',
                'factor'      => 1125899906842624
            ],
            [
                'abbr_prefix' => 'Ti',
                'long_prefix' => 'tebi',
                'factor'      => 1099511627776
            ],
            [
                'abbr_prefix' => 'Gi',
                'long_prefix' => 'gibi',
                'factor'      => 1073741824
            ],
            [
                'abbr_prefix' => 'Mi',
                'long_prefix' => 'mebi',
                'factor'      => 1048576
            ],
            [
                'abbr_prefix' => 'Ki',
                'long_prefix' => 'kibi',
                'factor'      => 1024
            ],
            [
                'abbr_prefix' => '',
                'long_prefix' => '',
                'factor'      => 1
            ],
        ];

        // Determine the conversion factor from the no-prefix IEC unit to the physical quantity's native unit
        $noPrefixToNativeUnitFactor = $siUnit->convertValueToNativeUnitOfMeasure(1) * $toBaseIecUnitFactor;

        // For each of the standard IEC prefixes, attempt to register a new unit of measure
        foreach ($siPrefixes as $prefixDefinition) {
            // Build a function for resolving a pattern into a unit name
            $parsePattern = function ($pattern) use ($prefixDefinition) {
                return strtr(
                    $pattern,
                    [
                        '%p' => $prefixDefinition['abbr_prefix'],
                        '%P' => $prefixDefinition['long_prefix'],
                        '%U' => strtoupper($prefixDefinition['long_prefix'])
                    ]
                );
            };

            // Generate the base name of the new unit
            $name = $parsePattern($namePattern);

            // Determine the factor that converts the new unit into the physical quantity's
            //   native unit of measure.
            if (is_int($powerFactor) && $powerFactor != 0) {
                $prefixDefinition['factor'] = pow($prefixDefinition['factor'], $powerFactor);
            }
            $toNativeUnitFactor = $noPrefixToNativeUnitFactor * $prefixDefinition['factor'];

            // Instantiate the new unit of measure
            $newUnit = UnitOfMeasure::linearUnitFactory($name, $toNativeUnitFactor);

            // Generate the aliases of the new unit
            foreach ($aliasPatterns as $aliasPattern) {
                $newUnitAlias = $parsePattern($aliasPattern);
                $newUnit->addAlias($newUnitAlias);
            }

            // If the unit doesn't conflict with any of the already-existing units, register it
            if (!static::unitNameOrAliasesAlreadyRegistered($newUnit)) {
                static::addUnit($newUnit);
            }
        }
    }
}
